<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="7" skipped="2" tests="18" time="0.385" timestamp="2021-11-12T00:10:20.297700" hostname="dlink-MD81S"><testcase classname="test_compare" name="test_greater" time="0.001"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="test_compare" name="test_greater_equal" time="0.001" /><testcase classname="test_compare" name="test_less" time="0.001"><skipped type="pytest.skip" message="unconditional skip">D:\PycharmProjects\python_pytest\test\test_compare.py:15: unconditional skip</skipped></testcase><testcase classname="test_div_by_13" name="test_divisible_by_13" time="0.002" /><testcase classname="test_div_by_3_and_6-(2)" name="test_divisible_by_3" time="0.001" /><testcase classname="test_div_by_3_and_6-(2)" name="test_divisible_by_6" time="0.002"><failure message="assert 3 == 0&#10;  +3&#10;  -0">input_2 = 39

    def test_divisible_by_6(input_2):
&gt;       assert input_2 % 6 == 0
E       assert 3 == 0
E         +3
E         -0

test_div_by_3_and_6-(2).py:7: AssertionError</failure></testcase><testcase classname="test_div_by_3_and_6" name="test_divisible_by_3" time="0.001" /><testcase classname="test_div_by_3_and_6" name="test_divisible_by_6" time="0.001"><failure message="assert 3 == 0&#10;  +3&#10;  -0">input_value = 39

    def test_divisible_by_6(input_value):
&gt;       assert input_value % 6 == 0
E       assert 3 == 0
E         +3
E         -0

test_div_by_3_and_6.py:12: AssertionError</failure></testcase><testcase classname="test_failure" name="test_sqrt_failure" time="0.002"><failure message="assert 5.0 == 6&#10;  +5.0&#10;  -6">def test_sqrt_failure():
        num = 25
&gt;       assert math.sqrt(num) == 6
E       assert 5.0 == 6
E         +5.0
E         -6

test_failure.py:8: AssertionError</failure></testcase><testcase classname="test_failure" name="test_square_failure" time="0.002"><failure message="assert 49 == 40&#10;  +49&#10;  -40">def test_square_failure():
        num = 7
&gt;       assert num ** 2 == 40
E       assert 49 == 40
E         +49
E         -40

test_failure.py:12: AssertionError</failure></testcase><testcase classname="test_failure" name="test_equality_failure" time="0.002"><failure message="assert 10 == 11&#10;  +10&#10;  -11">def test_equality_failure():
&gt;       assert 10 == 11
E       assert 10 == 11
E         +10
E         -11

test_failure.py:15: AssertionError</failure></testcase><testcase classname="test_multiple" name="test_some[1-2-3]" time="0.002" /><testcase classname="test_multiple" name="test_some[2-2-4]" time="0.001" /><testcase classname="test_multiple" name="test_some[5-4-10]" time="0.001"><failure message="assert 9 == 10&#10;  +9&#10;  -10">x = 5, y = 4, z = 10

    @pytest.mark.parametrize('x, y, z', [(1, 2, 3),
                                         (2, 2, 4),
                                         (5, 4, 10),
                                         (10, -10, 0),])
    def test_some(x, y, z):
&gt;       assert x + y == z
E       assert 9 == 10
E         +9
E         -10

test_multiple.py:8: AssertionError</failure></testcase><testcase classname="test_multiple" name="test_some[10--10-0]" time="0.001" /><testcase classname="test_square" name="test_sqrt" time="0.001" /><testcase classname="test_square" name="test_square" time="0.001" /><testcase classname="test_square" name="test_quality" time="0.002"><failure message="assert 10 == 11&#10;  +10&#10;  -11">@pytest.mark.others
    def test_quality():
&gt;       assert 10 == 11
E       assert 10 == 11
E         +10
E         -11

test_square.py:16: AssertionError</failure></testcase></testsuite></testsuites>